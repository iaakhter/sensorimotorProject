import numpy as np
import math as math






'''
Python version of the model implemented 
in https://sites.google.com/site/arkoene/QuaiaOptican.m?attredirects=0 by 
Koene
'''
def QuaiaOptican(R,I,dt):
    I = [I[2], I[1], I[0]]

    #system constants: %these parameters from Raphan 1998
    B = 7.47*10**(-5);	# plant viscosity
    K = 4.762*10**(-4);	# plant stiffness
    S = 2.49*10**(-6);	# tension-innervation ratio	???
    Kphi = 0.39;	#fraction of angle phi by which the rotation axes of the muscles rotate around R
    J = 5*10**(-7);	#moment of inertia of the eye
    T = np.shape(I)[1]*dt; 
    t = 0;
    w = np.array([0.0,0.0,0.0])
    w.shape = (3,1)

    #system variables
    if np.linalg.norm(R) == 0 :
        n = R
    else:
        n = R / np.linalg.norm(R)

    phi = np.linalg.norm(R)
    
    print 'got here'
    
    tim = np.arange(0,T, dt)
    for value in tim: 
        r = n*math.tan(phi/2)
        d = Kphi*phi
        
        #Torque exerted by the plant
        Tp = B*w + K*phi*n

        #UMV of the muscle pairs
        m = np.array([[n[0]**2, n[0]*n[1], n[0]*n[2]], [n[0]*n[1], n[1]**2, n[1]*n[2]], [n[0]*n[2], n[1]*n[2], n[2]**3]])
        m = np.squeeze(m, axis=(2))
        M = math.cos(d)*np.eye(3)+(1-math.cos(d)) * m + math.sin(d)*np.array([[0, -n[2], n[1]], [n[2], 0 ,-n[0]], [-n[1], n[0], 0]])
        
        #Torque generated by the muscles Tm
        Tm = S*np.dot(M,I)
        
        #Total torque acting on the eye
        Tt = Tm - Tp
        
        #New orientation of the eye
        dwdt = Tt/J
        w_inc = dwdt*dt
        
        w = w+w_inc
        n_inc = w/np.linalg.norm(w)
        
       
        
        p_inc = np.linalg.norm(w)*dt  
        
        R_inc = n_inc*math.tan(p_inc/2)
        R_inc.shape = (3,1)
     
        r = (R_inc + r + np.cross(R_inc,r, axis=0)) / (1 - np.dot(np.transpose(r),R_inc))
                
        n = r / np.linalg.norm(r)
        phi = 2*math.atan(np.linalg.norm(r))
        
        nrec= n
        phirec = phi
      
        R = phi*n
        Rrotvec=math.tan(phi/2)*n;
        t = t+1;
    nrec = [nrec[2], nrec[1], nrec[0]]
    return nrec, phirec

def main():
    R = np.array([[0], [0], [0]])
    I = np.array([[30],[0],[0]])
    dt = 0.001
    #
    n, phi = QuaiaOptican(R,I,dt)
    print "n: ", n
    print "phi: ", phi








